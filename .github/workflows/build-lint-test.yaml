name: build-lint-test

on:
  - push

env:
  LIBCURL_RELEASE: 'LATEST'
  LIBIDN2_RELEASE: '2.1.1'
  LIBSSH2_RELEASE: '1.9.0'
  LIBUNISTRING_RELEASE: '0.9.10'
  NCURSES_RELEASE: '6.1'
  OPENLDAP_RELEASE: '2.4.47'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Output yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn Cache
        uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-${{ runner.os }}-yarn-cache-${{ github.ref }}-
            v1-${{ runner.os }}-yarn-cache-
      - name: 'Set versions of dependencies based on the Node.js version'
        run: |
          echo "ZLIB_RELEASE=$(node -e "console.log(process.versions.zlib)")" >> $GITHUB_ENV
          echo "BROTLI_RELEASE=$(node -e "console.log(process.versions.brotli)")" >> $GITHUB_ENV
          echo "NGHTTP2_RELEASE=$(node -e "console.log(process.versions.nghttp2)")" >> $GITHUB_ENV
          echo "OPENSSL_VERSION=$(node -e "console.log(process.versions.openssl)")" >> $GITHUB_ENV
      - name: Restore libcurl deps cache
        uses: actions/cache@v2
        id: libcurl-deps-cache
        with:
          path: |
            ~/.node-gyp
            ~/deps
          key: v1-${{ runner.os }}-libcurl-deps-cache
          restore-keys: |
            v1-${{ runner.os }}-libcurl-deps-cache
      - name: 'Install all the stuff'
        run: |
          RUN_TESTS=false \
          RUN_PREGYP_CLEAN=false \
          PUBLISH_BINARY=false \
            ./scripts/ci/build.sh
      # We could have used lerna to run only on changed here...
      - name: 'Run lint'
        run: yarn lint
      - name: 'Run tsc'
        run: yarn build:dist
      - name: 'Run tests'
        run: yarn test:coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/**
          fail_ci_if_error: false
