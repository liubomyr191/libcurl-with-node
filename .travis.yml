os:
  - linux
  - osx
# macos version
osx_image: xcode7.3
# linux dist
dist: trusty
language: node_js
node_js:
  - "8"
  - "10"
  - "11"
# Being deprecated
# sudo: false
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      # Those are the defaults for trusty release on TravisCI
      - gcc-4.8
      - g++-4.8
      # Upgrade openssl
      - openssl
matrix:
  fast_finish: true
  allow_failures:
    - node_js: "11"
env:
  global:
    - GCC_VERSION=4.8
    - DEBUG=node-libcurl
    - LIBSSH2_RELEASE=1.8.2
    - secure: d64E8XbVGHuQ0kls1oVUF1y6pnj3iqZB34roKBHAFTyWBXReC1FWLb+qEShCJicUDkeK2At7vQUz7ohMn2mL/hVXiRbuSaYuDKFx8iDeei9mTgE+iy258mSovnNvXfG72EP5+LB+UOhgmTGe0qyTALOQ6ceCgjdscul3IGWE8lw=
  matrix:
    - LIBCURL_RELEASE=LATEST
    - LIBCURL_RELEASE=7_32_0

cache:
  directories:
    - $HOME/curl-source
    - $HOME/.node-gyp
    - $HOME/.npm
    - node_modules
  yarn: true

git:
  depth: 10
  submodules: false

before_install:
  # Use latest yarn
  - curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.15.2
  - export PATH=$HOME/.yarn/bin:$PATH
  - if [[ $TRAVIS_OS_NAME == "linux" ]]; then
      export CC="gcc-${GCC_VERSION}";
      export CXX="g++-${GCC_VERSION}";
      export LINK="gcc-${GCC_VERSION}";
      export LINKXX="g++-${GCC_VERSION}";
    fi
  # Update openssl on osx, and add it to the Path
  # When configuring openssl should we call ths directly?
  # PKG_CONFIG_PATH=/opt/OpenSSL/lib/pkgconfig ./configure --with-ssl
  # - if [[ $TRAVIS_OS_NAME == "osx" ]]; then
  #     brew update;
  #     brew reinstall -s libtool;
  #     brew install openssl;
  #     brew outdated openssl || brew upgrade openssl;
  #     brew link --force openssl;
  #     export PATH=/usr/local/opt/openssl/bin:${PATH};
  #     export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig;
  #   fi
  - export PATH=$HOME/bin:$PATH
  - yarn --version
  - node --version
  ###################
  # Build nghttp2
  ###################
  # nghttp2 version must match Node.js one
  - NGHTTP2_RELEASE=$(node -e "console.log(process.versions.nghttp2)")
  - NGHTTP2_DEST_FOLDER=$HOME/deps/nghttp2
  - ./scripts/ci/build-nghttp2.sh $NGHTTP2_RELEASE $NGHTTP2_DEST_FOLDER
  - export NGHTTP2_BUILD_FOLDER=$NGHTTP2_DEST_FOLDER/build
  ###################
  # Build OpenSSL
  ###################
  # OpenSSL version must match Node.js one
  - OPENSSL_RELEASE=$(node -e "console.log(process.versions.openssl.replace(/\./g, '_'))")
  - OPENSSL_DEST_FOLDER=$HOME/deps/openssl
  - ./scripts/ci/build-openssl.sh $OPENSSL_RELEASE $OPENSSL_DEST_FOLDER
  - export OPENSSL_BUILD_FOLDER=$OPENSSL_DEST_FOLDER/build
  ###################
  # Build zlib
  ###################
  # Zlib version must match Node.js one
  - ZLIB_RELEASE=$(node -e "console.log(process.versions.zlib)")
  - ZLIB_DEST_FOLDER=$HOME/deps/zlib
  - ./scripts/ci/build-zlib.sh $ZLIB_RELEASE $ZLIB_DEST_FOLDER
  - export ZLIB_BUILD_FOLDER=$ZLIB_DEST_FOLDER/build
  ###################
  # Build libssh2
  ###################
  - LIBSSH2_RELEASE=$LIBSSH2_RELEASE # just to be pedantic
  - LIBSSH2_DEST_FOLDER=$HOME/deps/libssh2
  - ./scripts/ci/build-libssh2.sh $LIBSSH2_RELEASE $LIBSSH2_DEST_FOLDER
  - export LIBSSH2_BUILD_FOLDER=$LIBSSH2_DEST_FOLDER/build
  ###################
  # Build libcurl
  ###################
  - if [[ $LIBCURL_RELEASE == 'LATEST' ]]; then
      LIBCURL_RELEASE=$(./scripts/ci/get-latest-libcurl-version.sh);
    fi
  - LIBCURL_DEST_FOLDER=$HOME/deps/libcurl
  - ./scripts/ci/build-libcurl.sh $LIBCURL_RELEASE $LIBCURL_DEST_FOLDER
  # Make curl-config and curl binaries visible
  - PATH=$LIBCURL_DEST_FOLDER/build/bin:$PATH 
  # output curl version info
  - curl --version
  - curl-config --version
  - curl-config --libs
  - curl-config --static-libs
  - curl-config --prefix
  - curl-config --cflags
  - PUBLISH_BINARY=false
  - COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
  - if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` || ${COMMIT_MESSAGE} =~ "[publish binary]" ]]; then
      PUBLISH_BINARY=true;
    fi
install:
  # Make sure we can see the correct curl-config
  - node tools/curl-config.js --version
  - node tools/curl-config.js --libs
  - node tools/curl-config.js --static-libs
  - node tools/curl-config.js --prefix
  - node tools/curl-config.js --cflags
  - npm_config_build_from_source=true npm_config_curl_static_build=true yarn install --frozen-lockfile
  - yarn test
before_script:
  - if [[ $PUBLISH_BINARY == true && $LIBCURL_VERSION_TAG == LATEST ]]; then
      yarn pregyp package testpackage --verbose;
      node scripts/module-packaging.js --publish "$(yarn pregyp reveal staged_tarball --silent)";
    fi
script:
  - INSTALL_RESULT=0
  - if [[ $PUBLISH_BINARY == true ]]; then
      INSTALL_RESULT=$(npm_config_fallback_to_build=false yarn install --frozen-lockfile > /dev/null)$? || true;
    fi
  - if [[ $INSTALL_RESULT != 0 ]]; then
      node scripts/module-packaging.js --unpublish "$(yarn pregyp reveal hosted_tarball --silent)";
      false;
    fi
  - yarn pregyp clean
